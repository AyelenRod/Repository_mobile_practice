<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="TermsProjectSettings">
    <currentTermsLanguage>en</currentTermsLanguage>
    <terms>
      <map>
        <entry key="en">
          <value>
            <map>
              <entry key="234720">
                <value>
                  <list>
                    <Term value="exception" definition="An event that disrupts normal program flow, usually due to an error." />
                    <Term value="invocation" definition="The act of calling or executing a function or method in code." />
                  </list>
                </value>
              </entry>
              <entry key="234722">
                <value>
                  <list>
                    <Term value="overloads" definition="Multiple versions of a function with the same name but different parameters." />
                    <Term value="parameters" definition="Values passed to a function to customize its behavior." />
                    <Term value="collection" definition="A data structure that holds multiple elements, such as lists or sets." />
                  </list>
                </value>
              </entry>
              <entry key="234723">
                <value>
                  <list>
                    <Term value="overloads" definition="Multiple methods with the same name but different parameter lists in a class." />
                    <Term value="declaration" definition="A statement that defines a function, variable, or class, specifying its name and type." />
                  </list>
                </value>
              </entry>
              <entry key="234724">
                <value>
                  <list>
                    <Term value="predicate" definition="A function that returns true or false for a given input." />
                  </list>
                </value>
              </entry>
              <entry key="234725">
                <value>
                  <list>
                    <Term value="regex" definition="A sequence of characters defining a search pattern, often used for string matching." />
                    <Term value="variable" definition="A named storage location in code that holds a value which can change during execution." />
                  </list>
                </value>
              </entry>
              <entry key="234727">
                <value>
                  <list>
                    <Term value="@Nullable" definition="Annotation indicating a variable or parameter can hold a null value." />
                    <Term value="@NotNull" definition="Annotation indicating a variable or parameter cannot hold a null value." />
                  </list>
                </value>
              </entry>
              <entry key="234733">
                <value>
                  <list>
                    <Term value="operator overloading" definition="Allowing operators like + or == to have user-defined behavior for custom types." />
                    <Term value="compareTo" definition="A function used to define ordering between objects, returning negative, zero, or positive integer." />
                  </list>
                </value>
              </entry>
              <entry key="234735">
                <value>
                  <list>
                    <Term value="comparable" definition="An interface for objects that can be ordered or compared to each other." />
                  </list>
                </value>
              </entry>
              <entry key="234736">
                <value>
                  <list>
                    <Term value="extension function" definition="A function added to an existing class without modifying its source code." />
                    <Term value="object expression" definition="A way to create an anonymous object with a specific type or interface implementation." />
                    <Term value="anonymous class" definition="A class declared and instantiated in a single expression, often for one-time use." />
                  </list>
                </value>
              </entry>
              <entry key="234737">
                <value>
                  <list>
                    <Term value="extension function" definition="A function added to an existing class without modifying its source code." />
                    <Term value="argument" definition="A value passed to a function or method when it is called." />
                    <Term value="utility function" definition="A helper function that performs a common, reusable operation." />
                  </list>
                </value>
              </entry>
              <entry key="234739">
                <value>
                  <list>
                    <Term value="extension" definition="A function or property added to a class without modifying its source code." />
                    <Term value="operator" definition="A special modifier that allows overloading standard operators like +, -, or () in Kotlin." />
                  </list>
                </value>
              </entry>
              <entry key="234740">
                <value>
                  <list>
                    <Term value="extension functions" definition="Functions that add new functionality to existing classes without modifying their source code." />
                    <Term value="standard library" definition="A collection of pre-written code and utilities provided by a programming language." />
                  </list>
                </value>
              </entry>
              <entry key="234741">
                <value>
                  <list>
                    <Term value="extension functions" definition="Functions that add new behavior to existing classes without modifying their source code." />
                  </list>
                </value>
              </entry>
              <entry key="234742">
                <value>
                  <list>
                    <Term value="predicates" definition="A function that returns true or false for a given input." />
                    <Term value="null" definition="A special value representing the absence of any object or value." />
                  </list>
                </value>
              </entry>
              <entry key="234743">
                <value>
                  <list>
                    <Term value="flattening" definition="The process of converting a collection of collections into a single collection containing all elements." />
                  </list>
                </value>
              </entry>
              <entry key="234744">
                <value>
                  <list>
                    <Term value="callable references" definition="A way to refer to functions or properties directly, using ::, instead of lambdas." />
                    <Term value="lambdas" definition="Anonymous functions that can be passed as arguments or assigned to variables." />
                    <Term value="call chains" definition="A sequence of function calls, usually on collections, where each call returns an object for the next." />
                  </list>
                </value>
              </entry>
              <entry key="234745">
                <value>
                  <list>
                    <Term value="in-place" definition="An operation that modifies the original data structure instead of creating a new one." />
                    <Term value="mutable" definition="A data structure or object whose contents can be changed after creation." />
                  </list>
                </value>
              </entry>
              <entry key="234746">
                <value>
                  <list>
                    <Term value="collection" definition="A data structure that holds multiple elements, such as lists, sets, or maps." />
                  </list>
                </value>
              </entry>
              <entry key="234747">
                <value>
                  <list>
                    <Term value="mapOf" definition="Kotlin function that creates a read-only map from key-value pairs." />
                  </list>
                </value>
              </entry>
              <entry key="234748">
                <value>
                  <list>
                    <Term value="destructuring declaration" definition="A Kotlin syntax for unpacking parts of an object into separate variables." />
                  </list>
                </value>
              </entry>
              <entry key="234749">
                <value>
                  <list>
                    <Term value="intersection" definition="A set operation that returns elements common to all given sets." />
                  </list>
                </value>
              </entry>
              <entry key="234750">
                <value>
                  <list>
                    <Term value="flag" definition="A boolean variable indicating a true/false or on/off state in programming." />
                  </list>
                </value>
              </entry>
              <entry key="234751">
                <value>
                  <list>
                    <Term value="lambdas" definition="Anonymous functions that can be passed as arguments or used inline in Kotlin." />
                    <Term value="collections" definition="Data structures that hold multiple elements, such as lists, sets, or maps in Kotlin." />
                  </list>
                </value>
              </entry>
              <entry key="234752">
                <value>
                  <list>
                    <Term value="setter" definition="A function that sets the value of a property, often allowing custom logic during assignment." />
                  </list>
                </value>
              </entry>
              <entry key="234753">
                <value>
                  <list>
                    <Term value="getter" definition="A function that retrieves the value of a property in a class or object." />
                    <Term value="initializer" definition="A function or expression used to set the initial value of a variable or property." />
                  </list>
                </value>
              </entry>
              <entry key="234754">
                <value>
                  <list>
                    <Term value="Delegates" definition="Objects that handle the implementation of a property’s getter and setter for another class." />
                    <Term value="lazy" definition="A delegate that initializes a property only upon its first access." />
                  </list>
                </value>
              </entry>
              <entry key="234755">
                <value>
                  <list>
                    <Term value="Delegates" definition="Objects that handle the getter and setter logic for a property on behalf of another class." />
                    <Term value="extension functions" definition="Functions that add new functionality to existing classes without modifying their source code." />
                  </list>
                </value>
              </entry>
              <entry key="234756">
                <value>
                  <list>
                    <Term value="extension functions" definition="Functions that add new functionality to existing classes without modifying their source code." />
                  </list>
                </value>
              </entry>
              <entry key="234757">
                <value>
                  <list>
                    <Term value="Function literals with receiver" definition="A lambda expression that can access members of a specified receiver object via 'this'." />
                    <Term value="extension function" definition="A function that adds new functionality to an existing class without modifying it." />
                    <Term value="HashMap" definition="A mutable map implementation that stores key-value pairs using a hash table." />
                  </list>
                </value>
              </entry>
              <entry key="234758">
                <value>
                  <list>
                    <Term value="scope functions" definition="Kotlin functions that execute a block of code within the context of an object." />
                  </list>
                </value>
              </entry>
              <entry key="234759">
                <value>
                  <list>
                    <Term value="argument" definition="A value passed to a function or method when it is called." />
                    <Term value="main function" definition="The entry point function where program execution begins in Kotlin applications." />
                  </list>
                </value>
              </entry>
              <entry key="234760">
                <value>
                  <list>
                    <Term value="receiver parameter" definition="An implicit parameter in a lambda or function, representing the object on which members are accessed." />
                    <Term value="function literal" definition="A function defined without a name, often used as a lambda or anonymous function." />
                  </list>
                </value>
              </entry>
              <entry key="234761">
                <value>
                  <list>
                    <Term value="predicate" definition="A function that returns true or false for a given input, often used for filtering." />
                    <Term value="signature" definition="The definition of a function's name, parameters, and return type." />
                  </list>
                </value>
              </entry>
              <entry key="963306">
                <value>
                  <list>
                    <Term value="modifier" definition="A keyword that changes the behavior or visibility of classes, functions, or properties." />
                    <Term value="compiler" definition="A program that translates source code into executable code or bytecode." />
                  </list>
                </value>
              </entry>
              <entry key="963307">
                <value>
                  <list>
                    <Term value="instanceof" definition="Java keyword to check if an object is an instance of a specific class." />
                    <Term value="IllegalArgumentException" definition="Java exception thrown to indicate a method has received an inappropriate argument." />
                  </list>
                </value>
              </entry>
              <entry key="963308">
                <value>
                  <list>
                    <Term value="when" definition="A Kotlin expression for conditional branching, similar to switch in other languages." />
                  </list>
                </value>
              </entry>
              <entry key="963309">
                <value>
                  <list>
                    <Term value="directive" definition="A statement that gives instructions to the compiler, such as import or package in Kotlin." />
                  </list>
                </value>
              </entry>
              <entry key="963310">
                <value>
                  <list>
                    <Term value="RationalNumber" definition="A class representing numbers as fractions with a numerator and denominator." />
                  </list>
                </value>
              </entry>
              <entry key="963311">
                <value>
                  <list>
                    <Term value="string literals" definition="Fixed sequences of characters in code, representing constant text values." />
                    <Term value="string templates" definition="Kotlin feature allowing variables and expressions inside string literals using $ or ${} syntax." />
                    <Term value="library functions" definition="Predefined functions provided by a programming language's standard library for common tasks." />
                  </list>
                </value>
              </entry>
              <entry key="963312">
                <value>
                  <list>
                    <Term value="exception" definition="An event that disrupts normal program flow, often due to errors or unexpected conditions." />
                    <Term value="compiler" definition="A program that translates source code into executable code, checking for errors in the process." />
                  </list>
                </value>
              </entry>
              <entry key="963313">
                <value>
                  <list>
                    <Term value="mapOf" definition="Kotlin function that creates a new read-only map from given key-value pairs." />
                    <Term value="listOf" definition="Kotlin function that creates a new read-only list containing specified elements." />
                  </list>
                </value>
              </entry>
              <entry key="963314">
                <value>
                  <list>
                    <Term value="lazily" definition="Executing operations only when needed, rather than processing all data upfront." />
                    <Term value="eagerly" definition="Processing all data immediately, rather than deferring operations until needed." />
                  </list>
                </value>
              </entry>
              <entry key="963315">
                <value>
                  <list>
                    <Term value="DSL" definition="Domain-Specific Language; a mini-language tailored for a specific aspect of a program." />
                    <Term value="type-safe" definition="A property ensuring that variables are used only with compatible data types at compile time." />
                  </list>
                </value>
              </entry>
            </map>
          </value>
        </entry>
      </map>
    </terms>
    <termsVersions>
      <map>
        <entry key="en" value="73" />
      </map>
    </termsVersions>
  </component>
</project>